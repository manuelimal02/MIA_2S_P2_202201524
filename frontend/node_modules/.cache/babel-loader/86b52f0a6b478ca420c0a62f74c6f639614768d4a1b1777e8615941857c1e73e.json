{"ast":null,"code":"var _jsxFileName = \"/media/manuelimal02/Data/USAC/6 Sexto Semestre/Manejo E Implementaci\\xF3n De Archivos Laboratorio/PROYECTO_2/frontend/src/pages/Visualizador.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Swal from \"sweetalert2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Visualizador = () => {\n  _s();\n  const [rutas, setRutas] = useState([]);\n  const handleGetPathDisk = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/AnalizadorGo/ObtenerDiscos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain'\n        },\n        body: \"obtenerdiscosruta\"\n      });\n      const text = await response.text();\n      if (text.includes(\"No hay particiones montadas.\")) {\n        Swal.fire(text, \"No hay particiones montadas\", \"error\");\n      } else {\n        const rutasObtenidas = text.split('\\n').filter(ruta => ruta.trim() !== \"\");\n        setRutas(rutasObtenidas);\n        Swal.fire(\"Mostrando Discos\", \"Particiones Montadas\", \"success\");\n      }\n    } catch (error) {\n      Swal.fire(\"Error Al Enviar Texto: \" + error, \"Error Desconocido\", \"error\");\n    }\n  };\n  const fetchPartitions = diskPath => {\n    // Guardar el disco seleccionado\n    setSelectedDisk(getDiskName(diskPath));\n\n    // Hacer la solicitud al backend para obtener las particiones\n    fetch(\"http://localhost:8080/AnalizadorGo/ObtenerParticiones\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        path: diskPath\n      })\n    }).then(response => response.json()).then(data => {\n      setPartitions(data || []);\n    }).catch(error => {\n      console.error(\"Error al obtener particiones:\", error);\n      setPartitions([]);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"logoutBtn\",\n      onClick: handleGetPathDisk,\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), \" Mostrar Discos\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: disks.length > 0 ? disks.map((disk, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card mb-3\",\n          style: {\n            cursor: \"pointer\"\n          }\n          // Al hacer clic en el disco, obtener particiones\n          ,\n          onClick: () => fetchPartitions(disk),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            children: /*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"card-title\",\n              children: [\"Disco: \", getDiskName(disk)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No se han creado discos a\\xFAn.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(Visualizador, \"8e0cgHZe7kWqEDmfwDY5iUZYIAU=\");\n_c = Visualizador;\nexport default Visualizador;\nvar _c;\n$RefreshReg$(_c, \"Visualizador\");","map":{"version":3,"names":["React","useState","Swal","jsxDEV","_jsxDEV","Visualizador","_s","rutas","setRutas","handleGetPathDisk","response","fetch","method","headers","body","text","includes","fire","rutasObtenidas","split","filter","ruta","trim","error","fetchPartitions","diskPath","setSelectedDisk","getDiskName","JSON","stringify","path","then","json","data","setPartitions","catch","console","className","children","id","onClick","fileName","_jsxFileName","lineNumber","columnNumber","disks","length","map","disk","index","style","cursor","_c","$RefreshReg$"],"sources":["/media/manuelimal02/Data/USAC/6 Sexto Semestre/Manejo E Implementación De Archivos Laboratorio/PROYECTO_2/frontend/src/pages/Visualizador.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Swal from \"sweetalert2\";\n\nconst Visualizador = () => {\n  const [rutas, setRutas] = useState([]); \n\n \n  const handleGetPathDisk = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/AnalizadorGo/ObtenerDiscos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n        },\n        body: \"obtenerdiscosruta\",\n      });\n\n      const text = await response.text();\n\n      if (text.includes(\"No hay particiones montadas.\")) {\n        Swal.fire(text, \"No hay particiones montadas\", \"error\");\n      } else {\n        const rutasObtenidas = text.split('\\n').filter(ruta => ruta.trim() !== \"\");\n        setRutas(rutasObtenidas);\n        Swal.fire(\"Mostrando Discos\", \"Particiones Montadas\", \"success\");\n      }\n\n    } catch (error) {\n      Swal.fire(\"Error Al Enviar Texto: \"+error, \"Error Desconocido\", \"error\");\n    }\n  };\n\n\n  const fetchPartitions = (diskPath) => {\n    // Guardar el disco seleccionado\n    setSelectedDisk(getDiskName(diskPath));\n\n    // Hacer la solicitud al backend para obtener las particiones\n    fetch(\"http://localhost:8080/AnalizadorGo/ObtenerParticiones\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ path: diskPath }), \n    })\n      .then((response) => response.json())\n      .then((data) => {\n        setPartitions(data || []); \n      })\n      .catch((error) => {\n        console.error(\"Error al obtener particiones:\", error);\n        setPartitions([]); \n      });\n  };\n\n  return (\n    <div className=\"container mt-5\">\n      <button id=\"logoutBtn\" onClick={handleGetPathDisk}>\n          <i className=\"fas fa-play\"></i> Mostrar Discos\n      </button>\n\n    <div className=\"row\">\n        {disks.length > 0 ? (\n          disks.map((disk, index) => (\n            <div key={index} className=\"col-md-3\">\n              <div\n                className=\"card mb-3\"\n                style={{ cursor: \"pointer\" }}\n                // Al hacer clic en el disco, obtener particiones\n                onClick={() => fetchPartitions(disk)} \n              >\n                <div className=\"card-body\">\n                  <h5 className=\"card-title\">Disco: {getDiskName(disk)}</h5>\n                </div>\n              </div>\n            </div>\n          ))\n        ) : (\n          <p>No se han creado discos aún.</p>\n        )}\n      </div>\n      </div>\n\n\n\n  );\n};\n\nexport default Visualizador;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}