{"ast":null,"code":"var _jsxFileName = \"/media/manuelimal02/Data/USAC/6 Sexto Semestre/Manejo E Implementaci\\xF3n De Archivos Laboratorio/PROYECTO_2/frontend/src/pages/Visualizador.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Swal from \"sweetalert2\";\nimport \"./Visualizador.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Visualizador = () => {\n  _s();\n  const [RutasDiscos, setRutas] = useState([]);\n  const [Particiones, setParticiones] = useState([]);\n  const [DiscoSeleccionado, setDiscoSeleccionado] = useState(\"\");\n\n  // Función para obtener las RutasDiscos de los discos\n  const handleGetPathDisk = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/AnalizadorGo/ObtenerDiscos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain'\n        },\n        body: \"obtenerdiscosruta\"\n      });\n      const text = await response.text();\n      if (text === \"\") {\n        Swal.fire(text, \"No hay particiones montadas\", \"error\");\n      } else {\n        const rutasObtenidas = text.split('\\n').filter(ruta => ruta.trim() !== \"\");\n        setRutas(rutasObtenidas);\n        Swal.fire(\"Mostrando Discos\", \"Particiones Montadas\", \"success\");\n      }\n    } catch (error) {\n      Swal.fire(\"Error Al Enviar Texto: \" + error, \"Error Desconocido\", \"error\");\n    }\n  };\n  useEffect(() => {\n    handleGetPathDisk();\n  }, []);\n\n  // Función para obtener las particiones de un disco específico\n  const fetchPartitions = RutaDisco => {\n    setDiscoSeleccionado(getNombreDisco(RutaDisco));\n    fetch(\"http://localhost:8080/AnalizadorGo/ObtenerParticiones\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        path: RutaDisco\n      })\n    }).then(response => response.json()).then(data => {\n      setParticiones(data || []);\n    }).catch(error => {\n      setParticiones([]);\n    });\n  };\n\n  // Función para obtener el nombre del disco a partir de la ruta\n  const getNombreDisco = RutaDisco => {\n    const CadenaRuta = RutaDisco.split('/');\n    return CadenaRuta[CadenaRuta.length - 1];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"unique-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Discos Creados\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"unique-disks\",\n      children: RutasDiscos.length > 0 ? RutasDiscos.map((disk, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"unique-disk-item\",\n        onClick: () => fetchPartitions(disk),\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-hdd unique-disk-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"Disco: \", getNombreDisco(disk)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No Se Han Creado Discos.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 16\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), DiscoSeleccionado && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Particiones del Disco: \", DiscoSeleccionado]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), Particiones && Particiones.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"unique-partition-list\",\n        children: [Particiones.map((partition, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"unique-partition-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-server unique-partition-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"unique-partition-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [\"Nombre: \", partition.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [\"Tipo: \", partition.type]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [\"Tama\\xF1o: \", partition.size]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: [\"Inicio: \", partition.start]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }, this)), Swal.fire(\"Mostrando Particiones Del Disco: \" + partition.name, \"Particiones Montadas\", \"success\")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No Existen Particiones Para Este Disco.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n_s(Visualizador, \"KatnYs2SySZRNoF393eObucaPz0=\");\n_c = Visualizador;\nexport default Visualizador;\nvar _c;\n$RefreshReg$(_c, \"Visualizador\");","map":{"version":3,"names":["React","useState","useEffect","Swal","jsxDEV","_jsxDEV","Visualizador","_s","RutasDiscos","setRutas","Particiones","setParticiones","DiscoSeleccionado","setDiscoSeleccionado","handleGetPathDisk","response","fetch","method","headers","body","text","fire","rutasObtenidas","split","filter","ruta","trim","error","fetchPartitions","RutaDisco","getNombreDisco","JSON","stringify","path","then","json","data","catch","CadenaRuta","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","disk","index","onClick","partition","name","type","size","start","_c","$RefreshReg$"],"sources":["/media/manuelimal02/Data/USAC/6 Sexto Semestre/Manejo E Implementación De Archivos Laboratorio/PROYECTO_2/frontend/src/pages/Visualizador.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Swal from \"sweetalert2\";\nimport \"./Visualizador.css\";\n\nconst Visualizador = () => {\n  const [RutasDiscos, setRutas] = useState([]); \n  const [Particiones, setParticiones] = useState([]);\n  const [DiscoSeleccionado, setDiscoSeleccionado] = useState(\"\");\n\n  \n\n  // Función para obtener las RutasDiscos de los discos\n  const handleGetPathDisk = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/AnalizadorGo/ObtenerDiscos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n        },\n        body: \"obtenerdiscosruta\",\n      });\n\n      const text = await response.text();\n\n      if (text === \"\") {\n        Swal.fire(text, \"No hay particiones montadas\", \"error\");\n      } else {\n        const rutasObtenidas = text.split('\\n').filter(ruta => ruta.trim() !== \"\");\n        setRutas(rutasObtenidas);\n        Swal.fire(\"Mostrando Discos\", \"Particiones Montadas\", \"success\");\n      }\n\n    } catch (error) {\n      Swal.fire(\"Error Al Enviar Texto: \"+error, \"Error Desconocido\", \"error\");\n    }\n  };\n\n  useEffect(() => {\n    handleGetPathDisk();\n  }, []);\n\n  // Función para obtener las particiones de un disco específico\n  const fetchPartitions = (RutaDisco) => {\n    setDiscoSeleccionado(getNombreDisco(RutaDisco)); \n\n    fetch(\"http://localhost:8080/AnalizadorGo/ObtenerParticiones\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ path: RutaDisco }), \n    })\n      .then((response) => response.json())\n      .then((data) => {\n        setParticiones(data || []); \n      })\n      .catch((error) => {\n        setParticiones([]); \n      });\n  };\n\n  // Función para obtener el nombre del disco a partir de la ruta\n  const getNombreDisco = (RutaDisco) => {\n    const CadenaRuta = RutaDisco.split('/');\n    return CadenaRuta[CadenaRuta.length - 1];\n  };\n\n  return (\n    <div className=\"unique-container\">\n      <h2>Discos Creados</h2>\n      <div className=\"unique-disks\">\n\n        {RutasDiscos.length > 0 ? (\n          RutasDiscos.map((disk, index) => (\n            <div key={index} className=\"unique-disk-item\" onClick={() => fetchPartitions(disk)}>\n              <i className=\"fas fa-hdd unique-disk-icon\"></i> \n              <h5>Disco: {getNombreDisco(disk)}</h5>\n            </div>\n          ))):(<p>No Se Han Creado Discos.</p>)}\n      </div>          \n\n      {DiscoSeleccionado && (\n        <div>\n          <h3>Particiones del Disco: {DiscoSeleccionado}</h3>\n          {Particiones && Particiones.length > 0 ? (\n            <ul className=\"unique-partition-list\">\n              {Particiones.map((partition, index) => (\n                <div key={index} className=\"unique-partition-item\">\n                <i className=\"fas fa-server unique-partition-icon\"></i> \n                <div className=\"unique-partition-details\">\n                  <ul>Nombre: {partition.name}</ul>\n                  <ul>Tipo: {partition.type}</ul>\n                  <ul>Tamaño: {partition.size}</ul>\n                  <ul>Inicio: {partition.start}</ul>\n                </div>\n              </div>\n              ))}\n              {Swal.fire(\"Mostrando Particiones Del Disco: \"+partition.name, \"Particiones Montadas\", \"success\")}\n            </ul>\n          ):(<p>No Existen Particiones Para Este Disco.</p>)}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Visualizador;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}