{"ast":null,"code":"var _jsxFileName = \"/media/manuelimal02/Data/USAC/6 Sexto Semestre/Manejo E Implementaci\\xF3n De Archivos Laboratorio/PROYECTO_2/frontend/src/pages/Visualizador.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Visualizador = () => {\n  const disks = [];\n  const partitions = [];\n\n  // Función para enviar el texto al backend \"logout\"\n  const handleLogout = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/AnalizadorGo/ProcesarComando', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain'\n        },\n        body: \"list\"\n      });\n      const text = await response.text();\n      if (text.includes(\"No hay particiones montadas.\")) {\n        Swal.fire(text, \"No hay particiones montadas\", \"error\");\n      } else {\n        if (text.startsWith(\"Disco\")) {\n          disks.push(text);\n        }\n      }\n    } catch (error) {\n      Swal.fire(\"Error Al Enviar Texto: \" + error, \"Error Desconocido\", \"error\");\n      setOutputText('Error al procesar los comandos de entrada.');\n    }\n  };\n\n  // Función para obtener las particiones de un disco\n  const fetchPartitions = diskPath => {\n    // Guardar el disco seleccionado\n    setSelectedDisk(getDiskName(diskPath));\n\n    // Hacer la solicitud al backend para obtener las particiones\n    fetch(\"http://localhost:8080/api/readmbr\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        path: diskPath\n      })\n    }).then(response => response.json()).then(data => {\n      partitions.push(data || []);\n    }).catch(error => {\n      console.error(\"Error al obtener particiones:\", error);\n      partitions.push([]);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-5\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Discos Creados\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: disks.length > 0 ? disks.map((disk, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-3\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card mb-3\",\n          style: {\n            cursor: \"pointer\"\n          }\n          // Al hacer clic en el disco, obtener particiones\n          ,\n          onClick: () => fetchPartitions(disk),\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-body\",\n            children: /*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"card-title\",\n              children: [\"Disco: \", getDiskName(disk)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No se han creado discos a\\xFAn.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), selectedDisk && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Particiones del Disco: \", selectedDisk]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), partitions && partitions.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-group\",\n        children: partitions.map((partition, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Nombre:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 19\n          }, this), \" \", partition.name, \" | \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Tipo:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 63\n          }, this), \" \", partition.type, \" |\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Tama\\xF1o:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 19\n          }, this), \" \", partition.size, \" | \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Inicio:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 63\n          }, this), \" \", partition.start]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No se encontraron particiones para este disco.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_c = Visualizador;\nexport default Visualizador;\nvar _c;\n$RefreshReg$(_c, \"Visualizador\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Visualizador","disks","partitions","handleLogout","response","fetch","method","headers","body","text","includes","Swal","fire","startsWith","push","error","setOutputText","fetchPartitions","diskPath","setSelectedDisk","getDiskName","JSON","stringify","path","then","json","data","catch","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","disk","index","style","cursor","onClick","selectedDisk","partition","name","type","size","start","_c","$RefreshReg$"],"sources":["/media/manuelimal02/Data/USAC/6 Sexto Semestre/Manejo E Implementación De Archivos Laboratorio/PROYECTO_2/frontend/src/pages/Visualizador.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nconst Visualizador = () => {\n  const disks = [];\n  const partitions = [];\n\n  // Función para enviar el texto al backend \"logout\"\n  const handleLogout = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/AnalizadorGo/ProcesarComando', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n        },\n        body: \"list\",\n      });\n      \n      const text = await response.text();\n\n      if (text.includes(\"No hay particiones montadas.\")) {\n        Swal.fire(text, \"No hay particiones montadas\", \"error\");\n      } else {\n        if (text.startsWith(\"Disco\")) {\n          disks.push(text);\n        }\n      }\n\n    } catch (error) {\n      Swal.fire(\"Error Al Enviar Texto: \"+error, \"Error Desconocido\", \"error\");\n      setOutputText('Error al procesar los comandos de entrada.'); \n    }\n  };\n\n\n  // Función para obtener las particiones de un disco\n  const fetchPartitions = (diskPath) => {\n    // Guardar el disco seleccionado\n    setSelectedDisk(getDiskName(diskPath));\n\n    // Hacer la solicitud al backend para obtener las particiones\n    fetch(\"http://localhost:8080/api/readmbr\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ path: diskPath }), \n    })\n      .then((response) => response.json())\n      .then((data) => {\n        partitions.push(data || []);\n      })\n      .catch((error) => {\n        console.error(\"Error al obtener particiones:\", error);\n        partitions.push([]); \n      });\n  };\n\n  return (\n    <div className=\"container mt-5\">\n      <h2>Discos Creados</h2>\n      <div className=\"row\">\n        {disks.length > 0 ? (\n          disks.map((disk, index) => (\n            <div key={index} className=\"col-md-3\">\n              <div\n                className=\"card mb-3\"\n                style={{ cursor: \"pointer\" }}\n                // Al hacer clic en el disco, obtener particiones\n                onClick={() => fetchPartitions(disk)} \n              >\n                <div className=\"card-body\">\n                  <h5 className=\"card-title\">Disco: {getDiskName(disk)}</h5>\n                </div>\n              </div>\n            </div>\n          ))\n        ) : (\n          <p>No se han creado discos aún.</p>\n        )}\n      </div>\n\n      {selectedDisk && (\n        <div className=\"mt-5\">\n          <h3>Particiones del Disco: {selectedDisk}</h3>\n          {partitions && partitions.length > 0 ? (\n            <ul className=\"list-group\">\n              {partitions.map((partition, index) => (\n                <li key={index} className=\"list-group-item\">\n                  <strong>Nombre:</strong> {partition.name} | <strong>Tipo:</strong> {partition.type} |{\" \"}\n                  <strong>Tamaño:</strong> {partition.size} | <strong>Inicio:</strong> {partition.start}\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <p>No se encontraron particiones para este disco.</p>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Visualizador;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}