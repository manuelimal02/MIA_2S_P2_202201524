{"ast":null,"code":"var _jsxFileName = \"/media/manuelimal02/Data/USAC/6 Sexto Semestre/Manejo E Implementaci\\xF3n De Archivos Laboratorio/PROYECTO_2/frontend/src/pages/Visualizador.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Swal from \"sweetalert2\";\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Visualizador = () => {\n  _s();\n  const [rutas, setRutas] = useState([]);\n  const [partitions, setPartitions] = useState([]);\n  const [selectedDisk, setSelectedDisk] = useState(\"\");\n\n  // Función para obtener las rutas de los discos\n  const handleGetPathDisk = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/AnalizadorGo/ObtenerDiscos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain'\n        },\n        body: \"obtenerdiscosruta\"\n      });\n      const text = await response.text();\n      if (text.includes(\"No hay particiones montadas.\")) {\n        Swal.fire(text, \"No hay particiones montadas\", \"error\");\n      } else {\n        const rutasObtenidas = text.split('\\n').filter(ruta => ruta.trim() !== \"\");\n        setRutas(rutasObtenidas);\n        Swal.fire(\"Mostrando Discos\", \"Particiones Montadas\", \"success\");\n      }\n    } catch (error) {\n      Swal.fire(\"Error Al Enviar Texto: \" + error, \"Error Desconocido\", \"error\");\n    }\n  };\n\n  // Función para obtener las particiones de un disco específico\n  const fetchPartitions = diskPath => {\n    setSelectedDisk(getDiskName(diskPath)); // Guardar el disco seleccionado\n\n    // Hacer la solicitud al backend para obtener las particiones\n    fetch(\"http://localhost:8080/AnalizadorGo/ObtenerParticiones\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        path: diskPath\n      })\n    }).then(response => response.json()).then(data => {\n      console.log(\"Particiones obtenidas:\", data);\n      setPartitions(data || []);\n    }).catch(error => {\n      console.error(\"Error al obtener particiones:\", error);\n      setPartitions([]);\n    });\n  };\n\n  // Función para obtener el nombre del disco a partir de la ruta (por ejemplo: \"disco1.mia\")\n  const getDiskName = diskPath => {\n    const parts = diskPath.split('/');\n    return parts[parts.length - 1]; // Devolver la última parte de la ruta\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"unique-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"logoutBtn\",\n      className: \"unique-btn\",\n      onClick: handleGetPathDisk,\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), \" Mostrar Discos\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Discos Creados\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"unique-disks\",\n      children: rutas.length > 0 ? rutas.map((disk, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"unique-disk-item\",\n        onClick: () => fetchPartitions(disk),\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-hdd unique-disk-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [\"Disco: \", getDiskName(disk)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No se han creado discos a\\xFAn.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), selectedDisk && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"unique-partitions\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Particiones del Disco: \", selectedDisk]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"unique-partition-list\",\n        children: partitions && partitions.length > 0 ? partitions.map((partition, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"unique-partition-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-database unique-partition-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"unique-partition-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Nombre:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 21\n            }, this), \" \", partition.name, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 63\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Tipo:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 21\n            }, this), \" \", partition.type, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 61\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Tama\\xF1o:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 21\n            }, this), \" \", partition.size, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 63\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Inicio:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 21\n            }, this), \" \", partition.start]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 19\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No se encontraron particiones para este disco.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(Visualizador, \"i93M1/gMIVlcSY119EE5mMYCtJ8=\");\n_c = Visualizador;\nexport default Visualizador;\nvar _c;\n$RefreshReg$(_c, \"Visualizador\");","map":{"version":3,"names":["React","useState","Swal","jsxDEV","_jsxDEV","Visualizador","_s","rutas","setRutas","partitions","setPartitions","selectedDisk","setSelectedDisk","handleGetPathDisk","response","fetch","method","headers","body","text","includes","fire","rutasObtenidas","split","filter","ruta","trim","error","fetchPartitions","diskPath","getDiskName","JSON","stringify","path","then","json","data","console","log","catch","parts","length","className","children","id","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","disk","index","partition","name","type","size","start","_c","$RefreshReg$"],"sources":["/media/manuelimal02/Data/USAC/6 Sexto Semestre/Manejo E Implementación De Archivos Laboratorio/PROYECTO_2/frontend/src/pages/Visualizador.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Swal from \"sweetalert2\";\nimport '@fortawesome/fontawesome-free/css/all.min.css';\n\nconst Visualizador = () => {\n  const [rutas, setRutas] = useState([]); \n  const [partitions, setPartitions] = useState([]);\n  const [selectedDisk, setSelectedDisk] = useState(\"\");\n\n  // Función para obtener las rutas de los discos\n  const handleGetPathDisk = async () => {\n    try {\n      const response = await fetch('http://localhost:8080/AnalizadorGo/ObtenerDiscos', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/plain',\n        },\n        body: \"obtenerdiscosruta\",\n      });\n\n      const text = await response.text();\n\n      if (text.includes(\"No hay particiones montadas.\")) {\n        Swal.fire(text, \"No hay particiones montadas\", \"error\");\n      } else {\n        const rutasObtenidas = text.split('\\n').filter(ruta => ruta.trim() !== \"\");\n        setRutas(rutasObtenidas);\n        Swal.fire(\"Mostrando Discos\", \"Particiones Montadas\", \"success\");\n      }\n\n    } catch (error) {\n      Swal.fire(\"Error Al Enviar Texto: \"+error, \"Error Desconocido\", \"error\");\n    }\n  };\n\n  // Función para obtener las particiones de un disco específico\n  const fetchPartitions = (diskPath) => {\n    setSelectedDisk(getDiskName(diskPath)); // Guardar el disco seleccionado\n\n    // Hacer la solicitud al backend para obtener las particiones\n    fetch(\"http://localhost:8080/AnalizadorGo/ObtenerParticiones\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ path: diskPath }), \n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(\"Particiones obtenidas:\", data);\n        setPartitions(data || []); \n      })\n      .catch((error) => {\n        console.error(\"Error al obtener particiones:\", error);\n        setPartitions([]); \n      });\n  };\n\n  // Función para obtener el nombre del disco a partir de la ruta (por ejemplo: \"disco1.mia\")\n  const getDiskName = (diskPath) => {\n    const parts = diskPath.split('/');\n    return parts[parts.length - 1]; // Devolver la última parte de la ruta\n  };\n\n  return (\n    <div className=\"unique-container\">\n      <button id=\"logoutBtn\" className=\"unique-btn\" onClick={handleGetPathDisk}>\n        <i className=\"fas fa-play\"></i> Mostrar Discos\n      </button>\n\n      <h2>Discos Creados</h2>\n      <div className=\"unique-disks\">\n        {rutas.length > 0 ? (\n          rutas.map((disk, index) => (\n            <div key={index} className=\"unique-disk-item\" onClick={() => fetchPartitions(disk)}>\n              <i className=\"fas fa-hdd unique-disk-icon\"></i> \n              <h5>Disco: {getDiskName(disk)}</h5>\n            </div>\n          ))\n        ) : (\n          <p>No se han creado discos aún.</p>\n        )}\n      </div>\n\n      {selectedDisk && (\n        <div className=\"unique-partitions\">\n          <h3>Particiones del Disco: {selectedDisk}</h3>\n          <div className=\"unique-partition-list\">\n            {partitions && partitions.length > 0 ? (\n              partitions.map((partition, index) => (\n                <div key={index} className=\"unique-partition-item\">\n                  <i className=\"fas fa-database unique-partition-icon\"></i> \n                  <div className=\"unique-partition-details\">\n                    <strong>Nombre:</strong> {partition.name} <br />\n                    <strong>Tipo:</strong> {partition.type} <br />\n                    <strong>Tamaño:</strong> {partition.size} <br />\n                    <strong>Inicio:</strong> {partition.start}\n                  </div>\n                </div>\n              ))\n            ) : (\n              <p>No se encontraron particiones para este disco.</p>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Visualizador;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}